*clighter8*	Plugin to improve c-family development environment based on Clang

==============================================================================
CONTENTS					*clighter8-contents*
1. Intro			|clighter8-intro|
2. Requirements			|clighter8-requirements|
3. Installation			|clighter8-installation|
4. Options			|clighter8-options|
5. Usage			|clighter8-usage|
6. Compilation Database		|clighter8-compilation-database|
7. Highlight Group		|clighter8-highlight-group|
8. FAQ				|clighter8-faq|
9. LICENSE			|clighter8-license|

==============================================================================
						*clighter8-intro*
1. Intro~

Clighter8 is a Vim plugin to support C-family code powered by libclang.
Currently it can highlight code semantically and do rename-refactor.
Clighter8's engine is highly optimized for Vim's new async io mechanism, that
means Clighter8 runs in background totally, and it won't slow down the
performance of Vim.

Github~

https://github.com/bbchung/clighter8

==============================================================================
						*clighter8-requirements*
2. Requirements~

Clighter8 requires the following things:

* Vim8
* libclang, http://llvm.org/apt/

==============================================================================
						*clighter8-installation*
3. Installation~

Use a VIM plugin manager, for example

Vundle Install~
>
	Bundle 'bbchung/clighter8'
<

==============================================================================
						*clighter8-options*
4. Options~

|g:clighter8_autostart|
|g:clighter8_libclang_path|
|g:clighter8_usage_priority|
|g:clighter8_syntax_priority|
|g:clighter8_highlight_whitelist|
|g:clighter8_highlight_blacklist|
|g:clighter8_global_compile_args|
|g:clighter8_parse_mode|
|g:clighter8_logfile|


------------------------------------------------------------------------------
						*g:clighter8_autostart*
g:clighter8_autostart~

Start Clighter8 automatically.

Default: `1`
------------------------------------------------------------------------------
						*g:clighter8_libclang_path*
g:clighter8_libclang_path~

Config the libclang path if libclang is not in default path or Clighter8 can't
find it.

Default: `''`
------------------------------------------------------------------------------
						*g:clighter8_usage_priority*
g:clighter8_usage_priority~

Set the match priority of references.

Default: `-1`
------------------------------------------------------------------------------
						*g:clighter8_syntax_priority*
g:clighter8_syntax_priority~

Set the syntex priority of syntax

Default: `-2`
------------------------------------------------------------------------------
						*g:clighter8_highlight_whitelist*
g:clighter8_highlight_whitelist~

Define the group of syntax to highligh.

Default: `[]`

This is the recommend setting to avoid code being dazzled:
>
	let g:clighter8_syntax_groups = ['clighter8NamespaceRef', 'clighter8FunctionDecl', 'clighter8FieldDecl', 'clighter8DeclRefExprCall', 'clighter8MemberRefExprCall', 'clighter8MemberRefExprVar', 'clighter8Namespace', 'clighter8NamespaceRef', 'cligherInclusionDirective', 'clighter8VarDecl']
<
------------------------------------------------------------------------------
						*g:clighter8_highlight_blacklist*
g:clighter8_highlight_blacklist~

Define the group of syntax NOT to highlight. Notice that this option will be
ignored if g:clighter8_highlight_whitelist is set and if both
g:clighter8_highlight_whitelist and g:clighter8_highlight_blacklist are not
set, all groups will be highlighted.

Default: `[]`

This is the recommend setting to avoid code being dazzled:
>
	let g:clighter8_syntax_groups = ['clighter8NamespaceRef', 'clighter8FunctionDecl', 'clighter8FieldDecl', 'clighter8DeclRefExprCall', 'clighter8MemberRefExprCall', 'clighter8MemberRefExprVar', 'clighter8Namespace', 'clighter8NamespaceRef', 'cligherInclusionDirective', 'clighter8VarDecl']
<
------------------------------------------------------------------------------
						*g:clighter8_global_compile_args*
g:clighter8_global_compile_args~

The global compile args of Clighter8.

Default: `['-x', 'c++']`
>
	let g:clighter8_global_compile_args = ['-I/usr/local/include']

--------------------------------------------------------------------------------
						*g:clighter8_parse_mode*
g:clighter8_parse_mode~

0: slow mode(recommended in slow machine or shared server)
1: fast mode

Default: `[]`
>
	let g:clighter8_parse_mode = 1

------------------------------------------------------------------------------
						*g:clighter8_logfile*
g:clighter8_logfile~

Set the clighter8 log file path. Notice that this option takes effect after
clighter server restart.

Default: `'/tmp/clighter8.log'`
>
------------------------------------------------------------------------------

==============================================================================
						*clighter8-usage*
5. Usage ~

Clighter8 provides these commands and functions.

|ClStart|
|ClStop|
|ClRestart|
|ClShowCursorInfo|
|ClShowCompileInfo|
|ClEnableLog|
|ClDisableLog|
|Rename()|

------------------------------------------------------------------------------
						*ClStart*
ClStart~

Start Clighter8 immediatly. Clighter8 will highlight the code after it starts,
and the refactor-rename function will be enabled.

------------------------------------------------------------------------------
						*ClStop*
ClStop~

Stop Clighter8 and cleanup highlight, refactor-rename function will be
disabled.

------------------------------------------------------------------------------
						*ClRestart*
ClRestart~

Restart clighter8.
------------------------------------------------------------------------------

						*ShowCursorInfo*
ClShowCursorInfo~

Show cursor informations.

-------------------------------------------------------------------------------
						*ShowCompileInfo*
ClShowCompileInfo~

Show compiler args of current buffer.

-----------------------------------------------------------------------------
						*ClEnableLog*
ClEnableLog~

Enable clighter8 log, the log file is put under /tmp/clighter8.log.
------------------------------------------------------------------------------
						*ClDisableLog*
ClDisableLog~

Disable clighter8 log.
------------------------------------------------------------------------------
						*ClRename()*
ClRename()~

* An experimental function to do rename-refactor.
* Only do renaming in opened buffers.
* There is no one-step undo function.

For convenience, you can add key mapping in your vimrc:
>
	nmap <silent> <Leader>r :call ClRename()<CR>
>
==============================================================================
						*clighter8-compilation-database*
6. Compilation Database~

Clighter8 supports compilation database if the compilation database exists in
current directory. It's strongly recommended to provide a compilation database
in your project to get the better result of highlight and refactor-rename. For
more information about compilation database, please reference
http://clang.llvm.org/docs/JSONCompilationDatabase.html
==============================================================================
						*clighter8-highlight-group*
7. Highlight Group~

Clighter8 defines following highlight groups corresponded to libclang.

hi default link clighter8Decl Identifier
hi default link clighter8Ref Type
hi default link clighter8Prepro PreProc
hi default link clighter8Stat Keyword

hi default link clighter8StructDecl Identifier
hi default link clighter8UnionDecl Identifier
hi default link clighter8ClassDecl Identifier
hi default link clighter8EnumDecl Identifier
hi default link clighter8FieldDecl Identifier
hi default link clighter8EnumConstantDecl Constant
hi default link clighter8FunctionDecl Identifier
hi default link clighter8VarDecl Identifier
hi default link clighter8ParmDecl Identifier
hi default link clighter8TypedefDecl Identifier
hi default link clighter8CxxMethod Identifier
hi default link clighter8Namespace Identifier
hi default link clighter8Constructor Identifier
hi default link clighter8Destructor Identifier
hi default link clighter8TemplateTypeParameter Identifier
hi default link clighter8TemplateNoneTypeParameter Identifier
hi default link clighter8FunctionTemplate Identifier
hi default link clighter8ClassTemplate Identifier
hi default link clighter8TypeRef Type
hi default link clighter8TemplateRef Type
hi default link clighter8NamespaceRef Type
hi default link clighter8MemberRef Type
hi default link clighter8DeclRefExpr Type
hi default link clighter8MemberRefExpr Type
hi default link clighter8MacroInstantiation Constant
hi default link clighter8InclusionDirective cIncluded

hi default link clighter8Usage IncSearch
You can customize these colors in your colorscheme, for example:
>
    hi clighter8TypeRef term=NONE cterm=NONE ctermbg=232 ctermfg=255 gui=NONE
    hi clighter8ClassDecl term=NONE cterm=NONE ctermbg=255 ctermfg=232 gui=NONE
<
==============================================================================
						*clighter8-faq*
8. FAQ~

Q. Clighter8 doesn't work.
A. Check the Requirements and Installation, and check if a valid libclang path
is given.


Q. ClRename() is an experimental function?
A. Due to the many restrictions, it's hard to do rename-refactor. Clighter8
only searches opened buffers in Vim to do renaming and it can't guarantee the
correctness.

Q. How to set compile args?
A. Clighter8 sets the compile args for each file with
(g:clighter8_global_compile_args + "compilation database"). Compile args will
affect the correctness of highlight and rename-refactor.


==============================================================================
                                                        *clighter8-license*
9. License ~

This software is licensed under the GPL v3 license.

Note: This license does not cover the files that come from the LLVM project.

==============================================================================


vim:tw=78:ts=8:noet:ft=help:
